name: Acestream Docker Setup with Puppeteer Screenshot

on:
  workflow_dispatch:
    inputs:
      port_base:
        description: "Puerto base (6878 por defecto)"
        required: false
        default: "6878"
      force_localhost:
        description: "Forzar localhost? (útil para GitHub-hosted)"
        required: false
        default: "true"

env:
  IMAGE_NAME: smarquezp/docker-acestream-ubuntu-home:latest
  SERVICE_NAME_BASE: acestream_
  DOCKER_COMPOSE_FILE: docker-compose.yml

jobs:
  setup-acestream:
    runs-on: ubuntu-latest
    
    steps:
    - name: Install Docker and dependencies
      run: |
        # Instalar Docker oficial
        sudo apt-get update
        sudo apt-get install -y ca-certificates curl gnupg
        sudo install -m 0755 -d /etc/apt/keyrings
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        sudo chmod a+r /etc/apt/keyrings/docker.asc
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    - name: Set up docker-compose.yml
      run: |
        cat << EOF > $DOCKER_COMPOSE_FILE
        version: '3.8'
        services:
          ${SERVICE_NAME_BASE}${{ inputs.port_base }}:
            image: $IMAGE_NAME
            container_name: ${SERVICE_NAME_BASE}${{ inputs.port_base }}
            restart: unless-stopped
            ports:
              - "${{ inputs.port_base }}:${{ inputs.port_base }}"
        EOF
        cat $DOCKER_COMPOSE_FILE

    - name: Start Acestream service
      run: |
        docker compose -f $DOCKER_COMPOSE_FILE up -d
        echo "Waiting 20 seconds for Acestream to initialize..."
        sleep 20

    - name: Setup Node.js for Puppeteer
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Puppeteer and take screenshot
      run: |
        # Instalar dependencias necesarias para Puppeteer
        sudo apt-get update
        sudo apt-get install -y libgbm-dev wget
        
        # Crear directorio para Chrome
        mkdir -p /tmp/chrome
        cd /tmp/chrome
        
        # Configurar Puppeteer para usar Chrome instalado
        echo "PUPPETEER_SKIP_DOWNLOAD=true" >> $GITHUB_ENV
        echo "PUPPETEER_EXECUTABLE_PATH=/usr/bin/google-chrome" >> $GITHUB_ENV
        
        # Instalar Puppeteer
        npm init -y
        npm install puppeteer
        
        # Script para tomar screenshot
        node <<EOF
        const puppeteer = require('puppeteer');
        const fs = require('fs');
        
        (async () => {
          const browser = await puppeteer.launch({
            headless: 'new',
            args: [
              '--no-sandbox',
              '--disable-setuid-sandbox',
              '--disable-dev-shm-usage',
              '--disable-accelerated-2d-canvas',
              '--disable-gpu',
              '--window-size=1280,1024'
            ],
            executablePath: process.env.PUPPETEER_EXECUTABLE_PATH
          });
          
          try {
            const page = await browser.newPage();
            await page.setViewport({ width: 1280, height: 1024 });
            
            console.log('Navigating to Acestream web interface...');
            const response = await page.goto(
              'http://127.0.0.1:${{ inputs.port_base }}/webui/player/', 
              { 
                waitUntil: 'networkidle2',
                timeout: 30000 
              }
            );
            
            if (!response.ok()) {
              console.error('Failed to load page:', response.status());
              process.exit(0);
            }
            
            console.log('Taking screenshot...');
            await page.screenshot({
              path: '/tmp/acestream.jpg',
              quality: 85,
              fullPage: false
            });
            
            // Verificar que el screenshot existe y tiene contenido
            if (fs.existsSync('/tmp/acestream.jpg')) {
              const stats = fs.statSync('/tmp/acestream.jpg');
              if (stats.size > 5000) {
                console.log('Screenshot successful!');
                process.exit(0);
              } else {
                console.error('Screenshot file is too small:', stats.size, 'bytes');
              }
            } else {
              console.error('Screenshot file not found');
            }
          } catch (error) {
            console.error('Error:', error.message);
          } finally {
            await browser.close();
            process.exit(0); // Siempre salir con código 0 para continuar el workflow
          }
        })();
        EOF
        
        # Verificar resultado
        if [ -f /tmp/acestream.jpg ]; then
          echo "SCREENSHOT_EXISTS=true" >> $GITHUB_ENV
        else
          echo "SCREENSHOT_EXISTS=false" >> $GITHUB_ENV
        fi

    - name: Upload screenshot
      if: env.SCREENSHOT_EXISTS == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: acestream-screenshot
        path: /tmp/acestream.jpg

    - name: Display service info
      run: |
        echo "=== Acestream Service Information ==="
        echo "Service running on port: ${{ inputs.port_base }}"
        echo "Web UI: http://127.0.0.1:${{ inputs.port_base }}/webui/player/"
        echo "API: http://127.0.0.1:${{ inputs.port_base }}/webui/api/service?method=get_version"
        echo "Screenshot available: $SCREENSHOT_EXISTS"
