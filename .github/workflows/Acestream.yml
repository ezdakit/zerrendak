name: Acestream Docker Setup

on:
  workflow_dispatch:
    inputs:
      internal_ip:
        description: "IP interna (deja vacÃ­o para autodetectar)"
        required: false
        default: "127.0.0.1"
      port_base:
        description: "Puerto base (6878 por defecto)"
        required: false
        default: "6878"

env:
  IMAGE_NAME: smarquezp/docker-acestream-ubuntu-home:latest
  SERVICE_NAME_BASE: acestream_
  DOCKER_COMPOSE_FILE: docker-compose.yml
  PREFIX: acestream://

jobs:
  setup-acestream:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Docker and dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y docker.io docker-compose net-tools
        
    - name: Verify Docker
      run: |
        docker --version
        docker info
        
    - name: Set internal IP
      id: ip
      run: |
        if [ "${{ github.event.inputs.internal_ip }}" != "127.0.0.1" ]; then
          echo "INTERNAL_IP=${{ github.event.inputs.internal_ip }}" >> $GITHUB_ENV
        else
          # Autodetect non-loopback IP
          IP=$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | head -n 1)
          if [ -z "$IP" ]; then
            IP="127.0.0.1"
          fi
          echo "INTERNAL_IP=$IP" >> $GITHUB_ENV
          echo "Using detected IP: $IP"
        fi
        
    - name: Find available ports
      id: ports
      run: |
        PORT_BASE=${{ github.event.inputs.port_base }}
        HTTP_PORT=$((PORT_BASE))
        HTTPS_PORT=$((PORT_BASE + 1))
        
        # Function to check if port is available
        check_port() {
          ! nc -z localhost $1
        }
        
        # Find first available port pair
        while ! (check_port $PORT_BASE && check_port $HTTP_PORT && check_port $HTTPS_PORT); do
          echo "Port $PORT_BASE, $HTTP_PORT or $HTTPS_PORT is in use, trying next..."
          PORT_BASE=$((PORT_BASE + 2))
          HTTP_PORT=$((PORT_BASE))
          HTTPS_PORT=$((PORT_BASE + 1))
        done
        
        echo "Using port: $PORT_BASE, HTTP port: $HTTP_PORT, HTTPS port: $HTTPS_PORT"
        echo "PORT=$PORT_BASE" >> $GITHUB_ENV
        echo "HTTP_PORT=$HTTP_PORT" >> $GITHUB_ENV
        echo "HTTPS_PORT=$HTTPS_PORT" >> $GITHUB_ENV
        echo "SERVICE_NAME=${SERVICE_NAME_BASE}${PORT_BASE}" >> $GITHUB_ENV
        
    - name: Create docker-compose.yml
      run: |
        cat << EOF > $DOCKER_COMPOSE_FILE
        version: '3.8'
        services:
          $SERVICE_NAME:
            image: $IMAGE_NAME
            container_name: $SERVICE_NAME
            restart: unless-stopped
            ports:
              - "$PORT:$PORT"
              - "$HTTP_PORT:$HTTP_PORT"
              - "$HTTPS_PORT:$HTTPS_PORT"
            environment:
              - INTERNAL_IP=$INTERNAL_IP
              - HTTP_PORT=$HTTP_PORT
              - HTTPS_PORT=$HTTPS_PORT
        networks:
          default:
            driver: bridge
        EOF
        echo "docker-compose.yml created:"
        cat $DOCKER_COMPOSE_FILE
        
    - name: Pull latest Docker image
      run: docker-compose -f $DOCKER_COMPOSE_FILE pull
        
    - name: Start Acestream service
      run: |
        docker-compose -f $DOCKER_COMPOSE_FILE up -d $SERVICE_NAME
        echo "Acestream service started successfully"
        sleep 10  # Wait for service to initialize
        
    - name: Install browser and screenshot tools
      run: |
        sudo apt-get install -y chromium-browser xvfb
        
    - name: Take screenshot of Acestream web interface
      run: |
        export DISPLAY=:99
        Xvfb :99 -screen 0 1280x1024x16 &
        sleep 5
        
        # Take screenshot with chromium
        chromium-browser --headless --disable-gpu --no-sandbox \
          --window-size=1280,1024 --screenshot=/tmp/acestream.png \
          "http://$INTERNAL_IP:$PORT/webui/player/"
          
        # Convert to smaller JPG
        sudo apt-get install -y imagemagick
        convert /tmp/acestream.png -quality 80 /tmp/acestream.jpg
        
        # Upload as artifact
        echo "Screenshot taken of Acestream web interface"
        
    - name: Upload screenshot
      uses: actions/upload-artifact@v3
      with:
        name: acestream-webui-screenshot
        path: /tmp/acestream.jpg
        
    - name: Display access information
      run: |
        echo "Acestream container started successfully on port: $PORT"
        echo "Web UI available at: http://$INTERNAL_IP:$PORT/webui/player/"
        echo "HTTP port: $HTTP_PORT"
        echo "HTTPS port: $HTTPS_PORT"
        echo "Screenshot of the web interface has been saved as an artifact"
