name: Acestream

on:
  workflow_dispatch:
    inputs:
      acestream_id:
        description: 'ID del stream de Acestream'
        required: true
        default: 'a1b2c3d4e5f6'
      wait_time:
        description: 'Tiempo de espera en segundos'
        required: false
        default: '10'

jobs:
  capture-screenshot:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y vlc xvfb libvlc-dev
        
    - name: Install Acestream
      run: |
        wget https://dl.acestream.media/linux/acestream_3.1.49_ubuntu_20.04_x86_64.tar.gz
        tar zxvf acestream_3.1.49_ubuntu_20.04_x86_64.tar.gz
        sudo mv acestream.engine /opt/
        sudo /opt/acestream.engine/start-engine --client-console &
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mss python-vlc
        
    - name: Run screenshot script
      run: |
        # Configurar virtual framebuffer para poder capturar pantalla
        Xvfb :1 -screen 0 1024x768x24 &
        export DISPLAY=:1
        
        # Ejecutar el script
        python -c "
import time
import subprocess
import mss
import mss.tools

def capture_acestream_screenshot(acestream_id, output_file='screenshot.png', wait_time=10):
    try:
        print(f'Iniciando stream de Acestream con ID: {acestream_id}')
        vlc_process = subprocess.Popen([
            'vlc',
            f'acestream://{acestream_id}',
            '--no-fullscreen',
            '--qt-start-minimized'
        ])
        
        print(f'Esperando {wait_time} segundos para la captura...')
        time.sleep(wait_time)
        
        with mss.mss() as sct:
            monitor = sct.monitors[1]
            screenshot = sct.grab(monitor)
            mss.tools.to_png(screenshot.rgb, screenshot.size, output=output_file)
            print(f'Screenshot guardado como: {output_file}')
        
        print('Cerrando el reproductor...')
        vlc_process.terminate()
        
    except Exception as e:
        print(f'Error: {e}')
        if 'vlc_process' in locals():
            vlc_process.terminate()

capture_acestream_screenshot('${{ github.event.inputs.acestream_id }}', 'screenshot.png', ${{ github.event.inputs.wait_time }})
        "
        
    - name: Upload screenshot
      uses: actions/upload-artifact@v3
      with:
        name: acestream-screenshot
        path: screenshot.png
