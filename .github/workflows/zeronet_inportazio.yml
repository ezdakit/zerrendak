name: znt_inportazio

on:
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    env:
      OUTPUT_FOLDER: zerrendak
      AUX_FOLDER: aux
      SCRIPTs_FOLDER: scripts
      ZNT_ADDRESS: 1JKe3VPvFe35bm1aiHdD4p1xcGCkZKhH3Q
      OUTPUT_FILE_1: page_iframe_content.html
      OUTPUT_FILE_2: ekitaldiak.csv
      OUTPUT_FILE_3: ekitaldiak.m3u
      OUTPUT_FILE_4: kanalak_jatorrizko.m3u
      OUTPUT_FILE_5: kanalak_jatorrizko_prev.m3u
      OUTPUT_FILE_6: kanalak_ott.m3u
      OUTPUT_FILE_7: kanalak_kodi.m3u


    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install system dependencies
        run: |
          set -e
          echo "Installing system dependencies"
          sudo apt-get update
          sudo apt-get install -y wget tar curl python3 python3-pip
          echo "Dependencies installed"

      # Configurar Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Instalar dependencias
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 selenium cloudscraper pytz

      - name: Download and extract ZNT
        run: |
          set -e
          echo "Downloading ZNT"
          wget https://github.com/HelloZeroNet/ZeroNet-linux/archive/dist-linux64/ZeroNet-py3-linux64.tar.gz
          tar xvpfz ZeroNet-py3-linux64.tar.gz
          cd ZeroNet-linux-dist-linux64/
          echo "ZNT downloaded and extracted"

      - name: Start ZNT
        run: |
          set -e
          echo "Starting ZNT"
          cd ZeroNet-linux-dist-linux64/
          ./ZeroNet.sh &
          echo "ZeroNet started"

      - name: Verify ZNT is running
        run: |
          set -e
          echo "Verifying ZNT is running"
          sleep 5
          curl -I http://127.0.0.1:43110
          echo "ZNT verification complete"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Playwright
        run: |
          npm install playwright

      - name: Install Playwright browsers
        run: |
          npx playwright install

      - name: Check site ZNT_ADDRESS synchronization
        run: |
          echo "Checking site synchronization for $ZNT_ADDRESS"
          curl -H "Accept: text/html" -I http://127.0.0.1:43110/$ZNT_ADDRESS/
          echo "Site ZNT_ADDRESS synchronization checked"

      - name: Extract iframe src from ZeroNet address
        run: |
          curl -H "Accept: text/html" --connect-timeout 10 --max-time 30 -s "http://127.0.0.1:43110/${{ env.ZNT_ADDRESS }}" -o content.html
          cat content.html
          ADDRESS=$(grep -oP '(?<=address = ")[^"]*' content.html)
          WRAPPER_NONCE=$(grep -oP '(?<=wrapper_nonce = ")[^"]*' content.html)
          SRC="${ADDRESS}/?wrapper_nonce=${WRAPPER_NONCE}"
          echo "Extracted src: $SRC"
          echo "iframe url:"
          echo "http://127.0.0.1:43110/${SRC}"
          node scripts/page_iframe_download.js "http://127.0.0.1:43110/${SRC}" "$AUX_FOLDER" "$OUTPUT_FILE_1"

      # 1. Verificar y copiar el archivo original (si existe)
      - name: Backup original file
        run: |
          if [ -f "$AUX_FOLDER/$OUTPUT_FILE_4" ]; then
            echo "El archivo $OUTPUT_FILE_4 existe, creando copia como $OUTPUT_FILE_5"
            cp "$AUX_FOLDER/$OUTPUT_FILE_4" "$AUX_FOLDER/$OUTPUT_FILE_5"
            ls -la "$AUX_FOLDER/"  # Opcional: mostrar contenido del directorio
          else
            echo "El archivo $OUTPUT_FILE_4 no existe aún, se creará uno nuevo"
            touch "$AUX_FOLDER/$OUTPUT_FILE_5"  # Crear archivo vacío para evitar errores
          fi

      # Ejecutar el script
      - name: Run Python script
        run: python scripts/parse_iframe_data.py  --html_file "$OUTPUT_FILE_1" --csv_file "$OUTPUT_FILE_2" --m3u_events_file "$OUTPUT_FILE_3" --m3u_channels_file "$OUTPUT_FILE_4" --aux_folder "$AUX_FOLDER" --listas_folder "$OUTPUT_FOLDER"

      - name: Compare files after script execution
        run: |
          # Verificar existencia de ambos archivos primero
          if [ ! -f "$AUX_FOLDER/$OUTPUT_FILE_4" ]; then
            echo "::error::El archivo $OUTPUT_FILE_4 no existe!"
            exit 1
          fi
          
          if [ ! -f "$AUX_FOLDER/$OUTPUT_FILE_5" ]; then
            echo "::error::El archivo de copia $OUTPUT_FILE_5 no existe!"
            exit 1
          fi
          
          # Comparación segura que maneja todos los casos
          if cmp --silent "$OUTPUT_FOLDER/$OUTPUT_FILE_4" "$OUTPUT_FOLDER/$OUTPUT_FILE_5"; then
            echo "Los archivos son idénticos"
          else
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 1 ]; then
              echo "::notice::Los archivos son diferentes"
              echo "Mostrando primeras diferencias:"
              diff --unified=0 "$OUTPUT_FOLDER/$OUTPUT_FILE_4" "$OUTPUT_FOLDER/$OUTPUT_FILE_5" | head -n 10
            else
              echo "::error::Error al comparar archivos (código $EXIT_CODE)"
              exit $EXIT_CODE
            fi
          fi

      - name: Check for file changes
        id: check_changes
        run: |
          cambios=$(git status --porcelain $OUTPUT_FOLDER $AUX_FOLDER)
          if [ -n "$cambios" ]; then
            echo "changes_detected=true" >> $GITHUB_ENV
            echo "Files changed:"
            echo "$cambios"
          else
            echo "changes_detected=false" >> $GITHUB_ENV
          fi

      - name: Add and commit changes
        if: env.changes_detected == 'true'
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add $OUTPUT_FOLDER/ $AUX_FOLDER/
          git commit -m "Actualización automática de archivos"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
