name: Acestream Screenshot Capture with Docker

on:
  workflow_dispatch:
    inputs:
      acestream_id:
        description: 'ID del stream de Acestream (ej: a1b2c3d4e5f6)'
        required: true
      wait_time:
        description: 'Tiempo de espera en segundos (default: 20)'
        required: false
        default: '20'

jobs:
  capture-screenshot:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker
      run: |
        sudo apt-get update
        sudo apt-get install -y docker.io
        sudo systemctl start docker
        sudo docker --version
        
    - name: Pull Acestream Docker image
      run: |
        sudo docker pull jrottenberg/ffmpeg:4.1-ubuntu
        sudo docker pull linuxserver/acestream:latest
        
    - name: Create screenshot script
      run: |
        cat > capture_screenshot.py << 'EOF'
import os
import time
import mss
import mss.tools

def capture_screenshot(output_file='screenshot.png', wait_time=10):
    try:
        print(f'[1/3] Esperando {wait_time} segundos...')
        time.sleep(wait_time)
        
        print('[2/3] Capturando pantalla...')
        with mss.mss() as sct:
            monitor = sct.monitors[0]
            screenshot = sct.grab(monitor)
            
            if screenshot.rgb is None or len(screenshot.rgb) == 0:
                raise ValueError("La captura de pantalla está vacía")
                
            mss.tools.to_png(screenshot.rgb, screenshot.size, output=output_file)
            print(f'[3/3] Screenshot guardado como: {output_file}')
        
        return True
        
    except Exception as e:
        print(f'Error durante la captura: {str(e)}')
        return False

if __name__ == "__main__":
    try:
        wait_time = int(os.getenv('WAIT_TIME', '20'))
        success = capture_screenshot('screenshot.png', wait_time)
        exit(0 if success else 1)
    except Exception as e:
        print(f"Error en la ejecución: {str(e)}")
        exit(1)
EOF

    - name: Run Acestream and capture screenshot
      env:
        ACESTREAM_ID: ${{ github.event.inputs.acestream_id }}
        WAIT_TIME: ${{ github.event.inputs.wait_time }}
      run: |
        # Configurar Xvfb
        Xvfb :99 -screen 0 1024x768x24 &
        export DISPLAY=:99
        
        # Iniciar Acestream en Docker
        sudo docker run -d \
          --name acestream \
          -e PUID=1000 \
          -e PGID=1000 \
          -e TZ=Europe/Madrid \
          -p 6878:6878 \
          -p 8621:8621 \
          --tmpfs /config \
          --device /dev/dri:/dev/dri \
          linuxserver/acestream:latest
        
        # Esperar a que Acestream inicie
        sleep 15
        
        # Ejecutar el script de captura
        python capture_screenshot.py
        
        # Detener el contenedor
        sudo docker stop acestream
        
        # Subir el screenshot
        curl -X PUT \
          -H "Authorization: Bearer $ACTIONS_RUNTIME_TOKEN" \
          -H "Content-Type: application/octet-stream" \
          --data-binary @screenshot.png \
          "${ACTIONS_RUNTIME_URL}_apis/resources/Upload?itemPath=acestream-screenshot%2Fscreenshot.png"
        
    - name: Upload screenshot
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: acestream-screenshot
        path: screenshot.png
