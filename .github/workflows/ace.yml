name: Acestream Full Configuration Deployment

on:
  workflow_dispatch:
    inputs:
      stream_id:
        description: "ID de stream Acestream"
        required: true
      port_base:
        description: "Puerto base HTTP (6878 por defecto)"
        required: false
        default: "6878"

env:
  IMAGE_NAME: smarquezp/docker-acestream-ubuntu-home:latest
  SERVICE_NAME: "acestream"
  DOCKER_COMPOSE_FILE: "docker-compose.yml"

jobs:
  deploy-acestream:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # Aumentado para chunks paralelos

    steps:

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Necesario para hacer push despu√©s
        persist-credentials: true  # Permite hacer push

    - name: Cache Docker image
      uses: actions/cache@v3
      with:
        path: /var/lib/docker
        key: acestream-image-${{ hashFiles('Dockerfile') }}
        restore-keys: |
          acestream-image-

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'  # Versi√≥n espec√≠fica
        cache: 'pip'  # Cachear dependencias
    
    - name: Install Docker
      run: |
        sudo apt-get update
        sudo apt-get install -y ca-certificates curl gnupg xvfb wkhtmltopdf ffmpeg pulseaudio python3-opencv libsm6 libxext6
        sudo install -m 0755 -d /etc/apt/keyrings
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        sudo chmod a+r /etc/apt/keyrings/docker.asc
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

    - name: Install Python packages
      run: |
        python -m pip install --upgrade pip
        pip install opencv-python-headless requests numpy

    - name: Configure Acestream with all required parameters
      run: |
        cat << EOF > $DOCKER_COMPOSE_FILE
        version: '3.8'
        services:
          $SERVICE_NAME:
            image: $IMAGE_NAME
            container_name: $SERVICE_NAME
            restart: unless-stopped
            network_mode: "host"
            environment:
              - PORT=${{ github.event.inputs.port_base }}
              - HTTP_PORT=${{ github.event.inputs.port_base }}
              - HTTPS_PORT=$(( ${{ github.event.inputs.port_base }} + 1 ))
              - API_PORT=$(( ${{ github.event.inputs.port_base }} + 2 ))
              - BIND_ALL=0
              - FALLBACK_TO_DYNAMIC_PORTS=1
            volumes:
              - acestream_data:/storage
            healthcheck:
              test: ["CMD-SHELL", "curl -f http://localhost:${{ github.event.inputs.port_base }}/webui/player/ || exit 1"]
              interval: 20s
              timeout: 15s
              retries: 12
              start_period: 5m
        volumes:
          acestream_data:
        EOF

        docker compose -f $DOCKER_COMPOSE_FILE up -d
        echo "üü† Acestream inici√°ndose (puede tardar hasta 10 minutos en primera ejecuci√≥n)..."

    - name: Extended initialization wait
      run: |
        # Espera extendida para descarga inicial de componentes
        sleep 600
        
        # Verificaci√≥n exhaustiva
        echo "=== Estado del contenedor ==="
        docker ps -a
        
        echo "=== √öltimos 100 logs ==="
        docker logs $SERVICE_NAME --tail 100
        
        echo "=== Verificaci√≥n de puertos ==="
        netstat -tulnp | grep ${{ github.event.inputs.port_base }} || echo "Puerto no encontrado"
        
        echo "=== Intento de conexi√≥n ==="
        if curl -sSf --connect-timeout 15 http://127.0.0.1:${{ github.event.inputs.port_base }}/webui/player/; then
          echo "‚úÖ Acestream listo en: http://127.0.0.1:${{ github.event.inputs.port_base }}/webui/player/"
        else
          echo "‚ùå Fallo en la inicializaci√≥n - Mostrando logs completos:"
          docker logs $SERVICE_NAME
          exit 1
        fi

    - name: Take screenshot
      run: |
        # Usamos xvfb-run para simular un display
        xvfb-run --server-args="-screen 0, 1024x768x24" \
          wkhtmltoimage --quality 50 \
          http://127.0.0.1:${{ github.event.inputs.port_base }}/webui/player/ \
          screenshot.jpg

        echo "üì∏ Captura realizada"

    - name: Upload screenshot
      uses: actions/upload-artifact@v4
      with:
        name: acestream-screenshot
        path: screenshot.jpg

    - name: Get page info
      run: |
        echo "üîç Informaci√≥n de la p√°gina:"
        curl -s http://127.0.0.1:${{ github.event.inputs.port_base }}/webui/player/ | grep -o "<title>.*</title>"
        echo "Puerto activo:"
        netstat -tulnp | grep ${{ github.event.inputs.port_base }} || echo "No se detect√≥ el puerto"

    - name: Capture Stream Frame
      run: |
        STREAM_URL="http://127.0.0.1:${{ github.event.inputs.port_base }}/ace/getstream?id=${{ github.event.inputs.stream_id }}"
        
        # Usamos Xvfb + FFmpeg en background
        xvfb-run --server-args="-screen 0, 1280x720x24" \
          ffmpeg -y \
            -ss 10 -i "$STREAM_URL" \
            -frames:v 1 \
            -f image2 "frame.jpg"
        
        # Verificar si se captur√≥ el frame
        if [ -f "frame.jpg" ]; then
          echo "‚úÖ Captura exitosa"
          echo "üì∏ Tama√±o: $(identify -format '%wx%h' frame.jpg)"
        else
          echo "‚ùå Fallo en la captura"
          exit 1
        fi

    - name: Upload Result
      uses: actions/upload-artifact@v4
      with:
        name: stream-capture
        path: frame.jpg

    - name: Process M3U and capture streams
      run: python process_m3u.py

    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git config --global pull.rebase true
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

    - name: Commit and Push Changes
      run: |
        git pull origin main
        git add logos_canales/ canales_screenshots/
        
        if ! git diff --cached --quiet; then
          git commit -m "Auto-update: $(date +'%Y-%m-%d') [skip ci]"
          git push origin main
          echo "‚úÖ Changes pushed"
        else
          echo "üü¢ No changes detected"
        fi

    - name: Cleanup
      if: always()
      run: |
        docker rm -f acestream || true
        docker system prune -af || true
